generator client {
  provider = "prisma-client-js"
  //  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  password      String
  role          UserRole   @default(USER)
  contactNumber String
  status        UserStatus @default(ACTIVE)
  profilePhoto  String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  reviews Reviews[]
  comment Comment[]

  like like[]
}

model Genre {
  id        String    @id @default(uuid())
  genreName String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   Content[]

  @@map("genres")
}

model Content {
  id String @id @default(uuid())

  title          String
  releaseYear    String
  duration       String
  thumbnail      String
  price          Float
  director       String
  producer       String
  actor          String
  actress        String
  spoilerWarning String
  synopsis       String
  isAvailable    Boolean   @default(false)
  platformId     String
  platform       Platform  @relation(fields: [platformId], references: [id])
  genreId        String
  genre          Genre     @relation(fields: [genreId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  reviews        Reviews[]

  @@map("contents")
}

model Platform {
  id           String    @id @default(uuid())
  platformName String
  platformLogo String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  content      Content[]

  @@map("platforms")
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

model Reviews {
  id         String       @id @default(uuid())
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  contentId  String
  content    Content      @relation(fields: [contentId], references: [id])
  reviewText String
  rating     Int
  spoiler    Boolean      @default(false)
  status     ReviewStatus @default(PENDING)
  tags       ReviewTags   @default(CLASSIC)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  comment    Comment[]
  like       like[]

  @@map("reviews")
}

enum ReviewStatus {
  PUBLISHED
  PENDING
  DELETED
}

enum ReviewTags {
  CLASSIC
  UNDERRATED
}

model Comment {
  id        String   @id @default(uuid())
  reviewId  String
  review    Reviews  @relation(fields: [reviewId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model like {
  id        String     @id @default(uuid())
  reviewId  String
  review    Reviews    @relation(fields: [reviewId], references: [id])
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  status    LikeStatus
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("likes")
}

enum LikeStatus {
  LIKED
  DISLIKED
}
